

// Docker Image


#!/bin/bash

# Update package repository
sudo apt-get update

# Install Docker
sudo apt-get install -y docker.io

# Start and enable Docker service
sudo systemctl start docker
sudo systemctl enable docker

# Verify Docker installation
sudo docker run hello-world

# Create a directory and navigate into it
mkdir mydockerdirectory && cd mydockerdirectory

# Create a Dockerfile
cat <<EOL > Dockerfile
FROM ubuntu
CMD ["echo", "Please subscribe to my channel"]
EOL

# Build the Docker image
sudo docker build -t mydockerimage .

# Verify the Docker image
sudo docker images

# Run the Docker image
sudo docker run mydockerimage

# List all containers
sudo docker ps -a












// Docker Python



#!/bin/bash

# Update package repository
sudo apt-get update

# Install Docker
sudo apt-get install -y docker.io

# Start and enable Docker service
sudo systemctl start docker
sudo systemctl enable docker

# Verify Docker installation
sudo docker run hello-world

# Create a directory for the project and navigate into it
mkdir mydockerdirectory && cd mydockerdirectory

# Create a Python script
cat <<EOL > hello.py
print("hello world")
EOL

# Create a Dockerfile
cat <<EOL > Dockerfile
FROM ubuntu
RUN apt-get update && apt-get install -y python3 python3-pip
WORKDIR /home/s-16/directory1
COPY hello.py .
CMD ["python3", "hello.py"]
EOL

# Build the Docker image
sudo docker build -t myfirst .

# Verify the Docker image
sudo docker images

# Run the Docker image
sudo docker run myfirst

# List all containers
sudo docker ps -a














//// Jenkins



#!/bin/bash

# Update the system package index
sudo apt-get update -y

# Install Java (Jenkins requires Java)
sudo apt-get install -y openjdk-11-jdk

# Add the Jenkins repository key to the system
curl -fsSL https://pkg.jenkins.io/debian/jenkins.io-2023.key | sudo tee /usr/share/keyrings/jenkins-keyring.asc > /dev/null

# Add the Jenkins repository to the system
echo deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] https://pkg.jenkins.io/debian binary/ | sudo tee /etc/apt/sources.list.d/jenkins.list > /dev/null

# Update the package index again to include Jenkins repository
sudo apt-get update -y

# Install Jenkins
sudo apt-get install -y jenkins

# Start Jenkins service
sudo systemctl start jenkins

# Enable Jenkins service to start on boot
sudo systemctl enable jenkins

# Display Jenkins status
sudo systemctl status jenkins

# Output the initial admin password for Jenkins
echo "Jenkins has been installed. Use the following password to complete setup:"
sudo cat /var/lib/jenkins/secrets/initialAdminPassword

# Provide information on accessing Jenkins
echo "Access Jenkins by navigating to: http://<your_server_ip>:8080"















///  Kubernetes



#!/bin/bash

# Step 1: Update system packages
sudo apt-get update -y
sudo apt-get upgrade -y

# Step 2: Install Docker (Kubernetes requires a container runtime)
sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
sudo apt-get update -y
sudo apt-get install -y docker-ce docker-ce-cli containerd.io

# Configure Docker daemon for Kubernetes
cat <<EOF | sudo tee /etc/docker/daemon.json
{
  "exec-opts": ["native.cgroupdriver=systemd"],
  "log-driver": "json-file",
  "log-opts": {
    "max-size": "100m"
  },
  "storage-driver": "overlay2"
}
EOF

# Restart Docker and enable it to start on boot
sudo systemctl restart docker
sudo systemctl enable docker

# Step 3: Add Kubernetes repository and install kubelet, kubeadm, and kubectl
sudo apt-get update -y
sudo apt-get install -y apt-transport-https curl
curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
cat <<EOF | sudo tee /etc/apt/sources.list.d/kubernetes.list
deb https://apt.kubernetes.io/ kubernetes-xenial main
EOF
sudo apt-get update -y
sudo apt-get install -y kubelet kubeadm kubectl

# Prevent Kubernetes packages from being updated automatically
sudo apt-mark hold kubelet kubeadm kubectl

# Step 4: Enable and start kubelet service
sudo systemctl enable kubelet
sudo systemctl start kubelet

# Step 5: Initialize Kubernetes cluster (master node setup)
echo "Initializing Kubernetes cluster..."
sudo kubeadm init --pod-network-cidr=192.168.0.0/16

# Configure kubectl for the current user
mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

# Step 6: Install a network plugin (e.g., Calico)
kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml

# Step 7: Join worker nodes (Optional, run this command on worker nodes)
# The join command will be output by the "kubeadm init" step.
echo "Run the kubeadm join command (displayed above) on your worker nodes to join them to the cluster."

echo "Kubernetes installation complete. Use 'kubectl get nodes' to verify the cluster status."













//// Git SHH KEY

#!/bin/bash

# Step 1: Update and install Git
echo "Updating package list and installing Git..."
sudo apt-get update -y
sudo apt-get install -y git

# Step 2: Verify Git installation
echo "Verifying Git installation..."
git --version

# Step 3: Configure Git global settings
echo "Configuring Git global settings..."
read -p "Enter your Git username: " GIT_USERNAME
git config --global user.name "$GIT_USERNAME"

read -p "Enter your Git email: " GIT_EMAIL
git config --global user.email "$GIT_EMAIL"

# Step 4: Display Git configuration
echo "Git global configuration:"
git config --global --list

# Step 5: Generate SSH key for GitHub
echo "Generating SSH key for GitHub..."
read -p "Enter your GitHub email (for the SSH key): " GITHUB_EMAIL
ssh-keygen -t rsa -b 4096 -C "$GITHUB_EMAIL" -f ~/.ssh/id_rsa -N ""

# Step 6: Add SSH key to the SSH agent
echo "Adding the SSH key to the SSH agent..."
eval "$(ssh-agent -s)"
ssh-add ~/.ssh/id_rsa

# Step 7: Display the SSH public key
echo "Copy the following SSH public key and add it to your GitHub account:"
cat ~/.ssh/id_rsa.pub

# Step 8: Test SSH connection with GitHub
echo "Testing SSH connection with GitHub..."
ssh -T git@github.com

# Step 9: Clone a GitHub repository (optional)
read -p "Do you want to clone a repository now? (y/n): " CLONE_REPO
if [[ "$CLONE_REPO" == "y" ]]; then
    read -p "Enter the repository URL: " REPO_URL
    git clone "$REPO_URL"
    echo "Repository cloned successfully."
else
    echo "Skipping repository cloning."
fi

# Final message
echo "Git and GitHub setup complete! You can now use Git to manage your projects and collaborate on GitHub."






/// Git PAT 

#!/bin/bash

# Step 1: Update and install Git
echo "Updating package list and installing Git..."
sudo apt-get update -y
sudo apt-get install -y git

# Step 2: Verify Git installation
echo "Verifying Git installation..."
git --version

# Step 3: Configure Git global settings
echo "Configuring Git global settings..."
read -p "Enter your Git username: " GIT_USERNAME
git config --global user.name "$GIT_USERNAME"

read -p "Enter your Git email: " GIT_EMAIL
git config --global user.email "$GIT_EMAIL"

# Step 4: Display Git configuration
echo "Git global configuration:"
git config --global --list

# Step 5: Create a Personal Access Token (PAT) on GitHub
echo -e "\n--- IMPORTANT ---"
echo "Please create a Personal Access Token (PAT) in your GitHub account:"
echo "1. Go to https://github.com/settings/tokens"
echo "2. Click 'Generate new token (classic)'"
echo "3. Select scopes like 'repo' (for repository access) and 'workflow' (if needed)."
echo "4. Generate the token and copy it securely."
read -p "Press [Enter] once you've created the PAT."

# Step 6: Save the PAT securely
echo "Enter your GitHub Personal Access Token:"
read -s GITHUB_PAT

# Save PAT to the Git credential store for HTTPS access
echo "Saving your Personal Access Token..."
git config --global credential.helper store
echo "https://$GIT_USERNAME:$GITHUB_PAT@github.com" > ~/.git-credentials

# Step 7: Clone a repository (optional)
read -p "Do you want to clone a GitHub repository now? (y/n): " CLONE_REPO
if [[ "$CLONE_REPO" == "y" ]]; then
    read -p "Enter the HTTPS URL of the repository (e.g., https://github.com/username/repo.git): " REPO_URL
    git clone "$REPO_URL"
    echo "Repository cloned successfully."
else
    echo "Skipping repository cloning."
fi

# Final message
echo "Git and GitHub setup with Personal Access Token is complete! You can now use Git to manage your projects and collaborate on GitHub."